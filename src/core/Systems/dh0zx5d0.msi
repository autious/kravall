#include "CollisionSystem.hpp"
#include "World.hpp"
#include <gfx/GFXInterface.hpp>
#include "Camera/Camera.hpp"
#include <limits>
#include <logger/Logger.hpp>

Core::CollisionSystem::CollisionSystem()
	: BaseSystem( EntityHandler::GenerateAspect< WorldPositionComponent, BoundingVolumeComponent >(), 0ULL )
{
}


void Core::CollisionSystem::Update( float delta )
{


	for( std::vector<Entity>::iterator it = m_entities.begin(); it != m_entities.end(); it++ )
	{
		Core::WorldPositionComponent* wpc = WGETC<Core::WorldPositionComponent>(*it);
		Core::BoundingVolumeComponent* bvc = WGETC<Core::BoundingVolumeComponent>(*it);

		float modifier = 0.5f;
		if( bvc->collisionModel == Core::BoundingVolumeCollisionModel::StaticResolution )
			modifier = 1.0f;

		for( std::vector<Entity>::iterator it = m_entities.begin(); it != m_entities.end(); it++ )
		{

		}







	}






}
